alias counter S0;
alias currentPCB S1;
alias sys_index S2;
alias currentPID S3;
alias newPCB S4;
alias physicalSP S5;
alias sys_call_no S6;
alias waitingPID S7;
alias waitingPCB S8;
alias waiting_PTBR S9;
//print "int7";
//print [14338];
physicalSP = [PTBR + (2 * (SP / 512))]*512 + (SP % 512);
sys_call_no = [physicalSP - 1];
if (sys_call_no  == 10) then
	counter = 0;
	physicalSP = [PTBR + (2 * (SP / 512))]*512 + (SP % 512);
	while (counter < 32) do
		if ([READY_LIST + (counter * 32) + 1] == 0 || [READY_LIST + (counter * 32) + 1] == 2) then
			counter = counter + 1;
			continue;
		else
			break;
		endif;
	endwhile;
	if(counter == 32) then
		//print "ok";
		halt;
	endif;
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + (currentPID * 32);
	//print currentPID;
	//print currentPCB;
	sys_index = currentPCB + 15;
	while (sys_index < 31) do
		if ([sys_index] != -1) then
			[FILE_TABLE + ([sys_index] * 2) + 1] = [FILE_TABLE + ([sys_index] * 2) + 1] - 1;
			if ([FILE_TABLE + ([sys_index] * 2) + 1] == 0) then
				[FILE_TABLE + ([sys_index] * 2)] = -1;
			endif;
			[sys_index] = -1;
			[sys_index + 1] = -1;
		endif;
		sys_index = sys_index + 2;
	endwhile;
	[currentPCB + 1] = 0;
	counter = 0;
	//print [2145];
	while (counter < 8) do
		if ([PTBR + counter + 1] == "01" || [PTBR + counter + 1] == "11") then
			[MEM_LIST + [PTBR + counter]] = [MEM_LIST + [PTBR + counter]] - 1;
			
		else
			if ([PTBR + counter] >= 448) then
				[DISK_LIST + [PTBR + counter]] = [DISK_LIST + [PTBR + counter]] - 1;
				store (6 ,20);
			endif;
		endif;
		[PTBR + counter] = -1;
		[PTBR + counter + 1] = "00";
		
		counter = counter + 2;
	endwhile;
	//print [2145];
	counter = READY_LIST + 1;
	waitingPID = 100 + currentPID;
	breakpoint;
	while (counter < 2561) do
		if([counter] == waitingPID) then
			//print "k";
			//print counter;
			[counter] = 1;
		endif;
		counter = counter + 32;
	endwhile;
	breakpoint;
	//print currentPCB;
	//print currentPID;
	if(currentPID != 31) then
		newPCB = READY_LIST + (32*(currentPID + 1));
	else
		newPCB = READY_LIST;
	endif;
	//print newPCB;
	//print [2145];
	//print [1569];
	while (newPCB != currentPCB) do
		//print newPCB;
		if ([newPCB + 1] == 1) then
			break;
		else
			if(currentPID != 31) then
				newPCB = READY_LIST + (32*(currentPID + 1));
			else
				newPCB = READY_LIST;
				currentPID = 0;
				continue;
			endif;
		currentPID = currentPID + 1;
		endif;
	endwhile;
	//print [2145];
	//print newPCB;
	BP = [newPCB + 2];
	SP = [newPCB + 3];
	PTBR = [newPCB + 5];
	PTLR = [newPCB + 6];
	R0 = [newPCB + 7];
	R1 = [newPCB + 8];
	R2 = [newPCB + 9];
	R3 = [newPCB + 10];
	R4 = [newPCB + 11];
	R5 = [newPCB + 12];
	R6 = [newPCB + 13];
	R7 = [newPCB + 14];
	SP = SP + 1;
	alias newphysicalSP S2;
	newphysicalSP  = ([PTBR + (2 * (SP/ 512))] * 512) + (SP % 512);
	[newphysicalSP] = [newPCB + 4];
	[newPCB + 1] = 2;
	breakpoint;
	//print PTBR;
	//print [PTBR];
	//print [PTBR + 1];
	//print [14338];
	//print "int7";
	//print [2145];
	ireturn;
else 	
	if(sys_call_no == 13) then
		//print "wait";
		//print [MEM_LIST + 28];		
		waitingPID = [physicalSP - 3];
		//print waitingPID;
		currentPID = (PTBR - 1024 ) / 8;
		//print currentPID;
		currentPCB = (currentPID * 32) + READY_LIST;
		waiting_PTBR = (waitingPID * 8) + 1024;
		waitingPCB = READY_LIST + (waitingPID*32);
		if ([waitingPCB + 1] == 0 || [waitingPCB + 1] == 2) then
			[physicalSP - 2] = -1;
			ireturn;
		endif;
		//print currentPID;
		[currentPCB + 1] = 100 + waitingPID;
		[currentPCB + 2] = BP;
		[currentPCB + 3] = SP - 1;
		[currentPCB + 4] = [physicalSP];
		[currentPCB + 5] = PTBR;
		[currentPCB + 6] = PTLR;
		[currentPCB + 7] = R0;
		[currentPCB + 8] = R1;
		[currentPCB + 9] = R2;
		[currentPCB + 10] = R3;
		[currentPCB + 11] = R4;
		[currentPCB + 12] = R5;
		[currentPCB + 13] = R6;
		[currentPCB + 14] = R7;
		//print [MEM_LIST + 28];
		inline "JMP 12202";
	else 
		currentPID = (PTBR - 1024 ) / 8;
		counter = READY_LIST + 1;
		waitingPID = 100 + currentPID;
		breakpoint;
		while (counter < 2561) do
			if([counter] == waitingPID) then
				//print "k";
				[counter] = 1;
			endif;
			counter = counter + 32;
		endwhile;
		breakpoint;
		[physicalSP - 2 ] =0;
		ireturn;
	endif;
endif;
